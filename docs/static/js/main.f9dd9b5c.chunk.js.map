{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputvalue","setInputvalue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","console","log","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","key","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"6MAGaA,EAAc,SAAC,GAAyB,IAAtBC,EAAqB,EAArBA,cAAqB,EAEZC,mBAAS,IAFG,mBAEzCC,EAFyC,KAE7BC,EAF6B,KAkBhD,OACI,0BAAMC,SAXW,SAAEC,GACnBA,EAAEC,iBAEGJ,EAAWK,OAAOC,OAAS,IAC5BR,GAAe,SAAAS,GAAI,OAAMP,GAAN,mBAAqBO,OACxCN,EAAc,OAOd,2BACIO,KAAK,OACLC,MAAQT,EACRU,SAnBc,SAAEP,GACxBF,EAAeE,EAAEQ,OAAOF,Y,uBCNnBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEbC,EAFa,iDAEoCC,UAAWH,GAF/C,+DAGAI,MAAOF,GAHP,cAGbG,EAHa,gBAIIA,EAAKC,OAJT,uBAIXC,EAJW,EAIXA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVvB,kBAcZM,GAdY,4CAAH,sDCAPO,EAAc,SAAC,GAAwB,IAAtBJ,EAAqB,EAArBA,GAAIC,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAIrC,OAFAc,QAAQC,IAAKN,EAAIC,EAAOV,GAGpB,yBAAKgB,UAAU,2CACX,yBAAKC,IAAMjB,EAAMkB,IAAMR,IACvB,2BAAKA,KCLJS,EAAU,SAAC,GAAkB,IAAhBrB,EAAe,EAAfA,SAAe,ECAb,SAAEA,GAAe,IAAD,EAEdd,mBAAS,CAC/BqB,KAAM,GACNe,SAAS,IAJ2B,mBAEjCC,EAFiC,KAE1BC,EAF0B,KAqBxC,OAdAC,qBAAW,WAEP1B,EAASC,GACJ0B,MAAM,SAAAC,GAECH,EAAS,CACLjB,KAAMoB,EACNL,SAAS,SAK1B,CAAEtB,IAEEuB,EDnBsBK,CAAc5B,GAAlCa,EAF4B,EAEjCN,KAAae,EAFoB,EAEpBA,QAEjB,OACI,oCACA,wBAAIJ,UAAU,qCAAsClB,GAElDsB,GAAW,uBAAGJ,UAAU,oCAAb,cAEb,yBAAKA,UAAU,aAEPL,EAAOJ,KAAK,SAAAC,GAAG,OACX,kBAAC,EAAD,eACCmB,IAAMnB,EAAIC,IACLD,UEUXoB,EAzBM,WAAO,IAAD,EAEa5C,mBAAS,CAAC,SAFvB,mBAEhB6C,EAFgB,KAEJ9C,EAFI,KAIvB,OACI,oCACA,4CACA,kBAAC,EAAD,CAAaA,cAAgBA,IAC7B,6BAEA,4BAEQ8C,EAAWtB,KAAK,SAAAT,GAAQ,OACpB,kBAAC,EAAD,CACC6B,IAAM7B,EACNA,SAAWA,UCdhCgC,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,U","file":"static/js/main.f9dd9b5c.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types'\n\nexport const AddCategory = ( { setCategories } ) => {\n\n    const [inputvalue, setInputvalue] = useState(\"\");\n\n    const handleInputChange = ( e ) => {\n        setInputvalue( e.target.value );\n    }\n\n    const handleSubmit = ( e ) => {\n        e.preventDefault();\n\n        if ( inputvalue.trim().length > 2 ) {\n            setCategories( cats => [ inputvalue, ...cats] );\n            setInputvalue(\"\");\n        }\n\n    }\n\n    return (\n        <form onSubmit={ handleSubmit }>\n            <input\n                type=\"text\"\n                value={ inputvalue }\n                onChange={ handleInputChange }\n            />\n        </form>\n    )\n}\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}","\n\nexport const getGifs = async( category ) => {\n\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category ) }&limit=10&api_key=WHr6h4LREGhHEppLdzvE74DH1hy1GDm8`;\n    const resp = await fetch( url );\n    const { data } = await resp.json();\n\n    const gifs = data.map( img => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n        }\n    })\n\n    return gifs;\n}\n","import React from 'react'\n\nexport const GifGridItem = ( {id, title, url} ) => {\n\n    console.log( id, title, url);\n\n    return (\n        <div className=\"card animate__animated animate__flipInY\">\n            <img src={ url } alt={ title } />\n            <p>{ title }</p>\n        </div>\n    )\n}\n","import React from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs'\nimport { GifGridItem } from './GifGridItem';\n\nexport const GifGrid = ({ category }) => {\n\nconst { data:images, loading } = useFetchGifs( category );\n\n    return (\n        <>\n        <h3 className=\"animate__animated animate__fadeIn\">{ category }</h3>\n        \n        { loading && <p className=\"animate__animated animate__flash\">Loading...</p> }\n\n        <div className=\"card-grid\">\n            {\n                images.map( img => (\n                    <GifGridItem\n                     key={ img.id }\n                     { ...img }\n                    />\n                )) \n            }\n        </div>\n        </>\n    )\n}\n","import { useState, useEffect } from \"react\"\nimport { getGifs } from \"../helpers/getGifs\";\n\n\nexport const useFetchGifs = ( category ) => {\n\n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    });\n\n    useEffect( () => {\n\n        getGifs( category )\n            .then( imgs => {\n\n                    setState({\n                        data: imgs,\n                        loading: false\n                    });\n\n            })      \n\n    }, [ category ])\n\n    return state;\n\n}","import React, {useState} from 'react'\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\nconst GifExpertApp = () => {\n\n    const [categories, setCategories] = useState(['cats'])\n\n    return (\n        <>\n        <h2>GifExpertApp</h2>\n        <AddCategory setCategories={ setCategories }/>\n        <hr />\n\n        <ol>\n            {\n                categories.map( category => (\n                    <GifGrid\n                     key={ category }\n                     category={ category }\n                     />\n                ))\n            }\n        </ol>\n\n        </>\n    )\n};\n\nexport default GifExpertApp\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GifExpertApp from './GifExpertApp';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}